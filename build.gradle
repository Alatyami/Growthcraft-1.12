/*
 * Growthcraft
 * Master build file
 * 
 * Authors: boni, Sunstrike, ProgWML6
 * Help from AbrarSyed
 * Adapted from Tinkers Construct by Avatair
 */

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.7'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: "checkstyle"

repositories {
    mavenLocal()
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // CraftTweaker
        name 'jared maven'
        url "http://maven.blamejared.com/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { // HWYLA
        url "http://tehnut.info/maven"
    }
    maven { // compatlayer
        name 'K-4u maven'
        url "http://maven.k-4u.nl/"
    }
    maven {
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name 'forge'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name "Tehnut Maven FS"
        url "http://tehnut.info/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        name "AppleCore"
        url "http://www.ryanliptak.com/maven/"
    }
    maven {
        name "IC2 Forestry"
        url "http://maven.ic2.player.to/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "growthcraft"
archivesBaseName = "growthcraft"

// External properties
ext.configFile = file "gradle.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = project.property('mod_version') + ".${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = project.property('minecraft_version') + "-" + project.property('forge_version')
    mappings = project.property('mappings')
    runDir = "run"
    replace '${version}', project.version
    useDepAts = true
}

def commonManifest = {
    attributes(
        "FMLAT": 'growthcraft_at.cfg'
    )
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    // deobfCompile "com.pam.harvestcraft:harvestcraft:1.12a"
    compile "rustic:Rustic:" + project.property('rustic_version')
    compile "thaumcraft:Thaumcraft:" + project.property('minecraft_version') + ":" + project.property('thaumcraft_version')
    runtime "mezz.jei:jei_" + project.property('minecraft_version') + ":" + project.property('jei_version')
    deobfProvided "mezz.jei:jei_" + project.property('minecraft_version') + ":" + project.property('jei_version') + ":api"
    compile "mcp.mobius.waila:Hwyla:" + project.property('hwyla_version')
    compile "baubles:Baubles:" + project.property('minecraft_version_short') + ":" + project.property('baubles_version')
//LOCAL  	compile "erebus:Erebus:1.0.22"
	compile "com.github.glitchfiend.biomesoplenty:SereneSeasons:1.12.2-1.2.15.100:universal"
	compile "com.ferreusveritas.dynamictrees:DynamicTrees:1.12.2-0.9.4"

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "MCversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'MCversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// Add Access Transformers Manifest
jar {
    manifest commonManifest

    finalizedBy reobfJar
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'

    manifest commonManifest
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

// Create API library jar
task libJar(type: Jar) {
    from(sourceSets.main.java) {
        include "growthcraft/*/api/**/*"
    }
    classifier = 'lib'
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives libJar
}

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore location
    ext.keystore_location = "."

if (!project.hasProperty("keystore_user_alias")) // keystore user alias
    ext.keystore_user_alias = ""
if (!project.hasProperty("sftp_username"))
    ext.sftp_username = ""
if (!project.hasProperty("sftp_key"))
    ext.sftp_key = ""
if (!project.hasProperty("keystore_user_password")) // keystore user pass
    ext.keystore_user_password = ""
if (System.getenv().KSK_PW != null)
    ext.keystore_user_password = System.getenv().KSK_PW


task("uploadJars", dependsOn: "build") {

    description = "uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                if (project.hasProperty("local_maven")) {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                    }
                }
                if (project.hasProperty("sftp_maven")) {
                    repositories.mavenDeployer {
                        configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}") {
                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
                        }
                    }
                }
            }
        }
    }
}

task signUniversal(type: SignJar, dependsOn: 'jar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:]

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner

    alias = 'tcon'
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
uploadArchives.dependsOn signUniversal
build.dependsOn signUniversal

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
            artifact libJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}
